文件：4.5 Keras 案例-手写数字分类（二）
P1：同学们大家好，前面我们给大家介绍了本节关于Keras案例-手写数字识别分类的理论部分的内容，本节课在基于前面所讲内容的基础上，给大家进一步介绍基于Keras框架的手写数字分类识别的代码实现部分。
P2：好，下面我们就来看具体的基于Keras的神经网络框架的实现案例。这里，我们首先进行模块的加载和数据的加载。借助于我们所学的python的基础，我们来看一下，首先，import加载我们的tensorflow，然后，打印Keras的版本号，验证模块加载是否正常。下面，数据加载，由于我们MNIST数据集都是预先加载到了我们的Keras库中了，所以我们直接在keras库中就可以加载MNIST数据，这里train_images和train_labels组成了训练集，模型将从这些数据中进行学习。然后在测试集（testset，即test_images和test_labels）上对模型进行测试。图像image被编码为Numpy数组，而标签label是数字数组，取值范围为0~9。图像和标签一一对应。
P3：下面，我们就开始创建神经网络了。可以看出，本例中的网络包含2个Dense层，它们是密集连接（也叫全连接）的神经层。第二层（也是最后一层）是一个10路softmax层，它将返回一个由10个概率值（总和为1）组成的数组。每个概率值表示当前数字图像属于10个数字类别中某一个的概率。
P4：而要想训练网络，我们还需要对网络进行编译，编译操作中主要涉及到三个参数，即损失函数、优化器以及需要监控的指标，这些概念我们在之前的内容都讲过，这里就不在多说。
P5：上面网络的框架都搭建好了，然后我们就要开始准备图像数据了。这里，我们的准备工作就是在开始训练之前，我们将对数据进行预处理，将其变换为网络要求的形状，并缩放到所有值都在[0,1]区间。比如，之前训练图像保存在一个uint8类型的数组中，取值区间为[0,255]。我们使用reshape函数将其变换为一个float32数组，并通过除以255的操作，将取值范围变为0~1。
P6：同样，我们还需要对标签进行分类编码，这里将标签的形式转换为与神经网络预测输出形式（softmax）维度相同的独热码（one-hot）张量形式。
P7：准备工作就绪，现在我们准备开始训练网络，在Keras中这一步是通过调用网络的fit方法来完成的——我们在训练数据上拟合（fit）模型。对其进行执行，可以看到，网络就开始进行学习训练了。训练过程中显示了两个数字：一个是网络在训练数据上的损失（loss），另一个是网络在训练数据上的准确度（acc）。
我们很快就在训练数据上达到了0.9882（98.82%）的准确度。
P8：现在我们来检查一下模型在测试集上的性能。我们调用evaluate函数，对测试集进行评估。可以看出，通过测试，测试集精度达到了98.11%，还可以。以上就是我们使用Keras框架进行手写数字识别的是实例。
我们本节课的内容主要也就介绍到这里，我们简单回顾一下，本节课主要通过一个手写数字识别的实例让大家学习了解了基于Keras框架的神经网络的实现方法。其实，通过我们这个实例的结果，我们可以进一步发现，测试集精度为98.11%，比训练集精度的98.82%还是相对要低一些的。这主要是训练精度和测试精度之间的这种差距是过拟合所造成的。过拟合是机器学习模型在新数据上的性能往往比在训练数据上要差，而如何对其进行更为合理的设计，这将是我们下一章神经网络优化章节所要探讨的重要内容。
好了，同学们，以上就是我们这节课所讲的关于使用Keras框架进行手写数字识别的案例实现部分的相关内容，今天的课就介绍到这里，谢谢大家。